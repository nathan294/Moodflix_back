name: Build & Deploy Stage API

on:
  push:
    branches:
      - stage

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  VM_HOST: ${{ secrets.VM_HOST }}
  GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
  GHCR_TOKEN: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}
  DB_USER: ${{ secrets.DB_USER_STG }}
  DB_PASS: ${{ secrets.DB_PASS_STG }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_NAME: ${{ secrets.DB_NAME_STG }}
  APP_PORT: ${{ secrets.APP_PORT_STG }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/ssh_key
          chmod 600 ~/.ssh/ssh_key
          cat >> ~/.ssh/config <<END
          Host VM
            HostName $VM_HOST
            User ubuntu
            IdentityFile ~/.ssh/ssh_key
            StrictHostKeyChecking no
          END

      - name: Connect to Container Registry
        run: |
          ssh VM "echo ${{ secrets.CONTAINER_REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin"

      - name: Pull image from Container Registry
        run: |
          ssh VM "docker pull ghcr.io/nathan294/moodflix_back:stage"

      - name: Stop existing container
        run: |
          ssh VM "if sudo docker ps -a | grep -q 'moodflix_back_container_stage'; then
            sudo docker stop moodflix_back_container_stage || true
            sudo docker rm moodflix_back_container_stage || true
          fi"

      - name: Stop existing container (migrations)
        run: |
          ssh VM "if sudo docker ps -a | grep -q 'moodflix_alembic_stage'; then
            sudo docker stop moodflix_alembic_stage || true
            sudo docker rm moodflix_alembic_stage || true
          fi"

      - name: Create .env file
        run: |
          echo "DB_USER=${{ secrets.DB_USER_STG }}" > .env
          echo "DB_PASS=${{ secrets.DB_PASS_STG }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME_STG }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "APP_PORT=${{ secrets.APP_PORT_STG }}" >> .env

      - name: Copy .env to VM
        run: |
          scp .env VM:~/moodflix_stage.env
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Run migrations
        run: |
          ssh VM "sudo docker run --env-file stage.env --name moodflix_alembic_stage ghcr.io/nathan294/moodflix_back:stage alembic upgrade head"

      - name: Run Docker with the image we just pulled
        run: |
          ssh VM "sudo docker run -p ${{ secrets.APP_PORT_STG }}:${{ secrets.APP_PORT_STG }} --name moodflix_back_container_stage --env-file stage.env -d ghcr.io/nathan294/moodflix_back:stage uvicorn api.main:app --host 0.0.0.0 --port ${{ secrets.APP_PORT_STG }}"
