"""movie note

Revision ID: dff54f65d9f2
Revises: f54d9f430501
Create Date: 2023-10-15 13:37:34.546545

"""
from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "dff54f65d9f2"
down_revision: Union[str, None] = "f54d9f430501"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("movie_list_association", sa.Column("is_note", sa.Boolean(), nullable=False))
    op.add_column("movie_list_association", sa.Column("note", sa.Integer(), nullable=True))
    # SQL for creating the trigger
    op.execute(
        """
    CREATE OR REPLACE FUNCTION create_notes_list_for_new_user()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO movie_list (id, user_id, title, status, locked, created_at, updated_at)
        VALUES (uuid_generate_v4(), NEW.firebase_id, 'Notes', 'activated', true, NOW(), NOW());
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    """
    )

    op.execute(
        """
    CREATE TRIGGER create_notes_list_for_new_user
    AFTER INSERT ON "user"
    FOR EACH ROW EXECUTE FUNCTION create_notes_list_for_new_user();

    """
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("movie_list_association", "note")
    op.drop_column("movie_list_association", "is_note")
    # SQL for dropping the trigger
    op.execute(
        """
    DROP TRIGGER IF EXISTS create_notes_list_for_new_user ON "user";
    """
    )

    op.execute(
        """
    DROP FUNCTION IF EXISTS create_notes_list_for_new_user();
    """
    )
    # ### end Alembic commands ###
